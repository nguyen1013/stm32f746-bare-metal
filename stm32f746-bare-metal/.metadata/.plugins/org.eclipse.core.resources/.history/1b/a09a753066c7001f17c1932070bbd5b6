/*
 * uart.c
 *
 *  Created on: Dec 31, 2024
 *      Author: songn
 */
#include <stdint.h>
#include "stm32f7xx.h"
#include "uart.h"

int __io_putchar(int ch)
{
	uart_write(USART1,ch);

	return ch;
}

void uart1_tx_init(void)
{
	// 1. Enable clk access GPIOA
	set_ahb1_periph_clock(RCC_AHB1ENR_GPIOAEN);

	// 2. Set PA9 to alternation mode
	set_pin_mode(GPIOA, UART1_TX, GPIO_ALTERNATE_MODE);

	// 3. Set alternate function to USART
	GPIOA->AFR[1] |= (1U<<4);
	GPIOA->AFR[1] |= (1U<<5);
	GPIOA->AFR[1] |= (1U<<6);
	GPIOA->AFR[1] &= ~(1U<<7);

	// Enable clk to the USART1 module
	set_apb2_periph_clock(RCC_APB2ENR_USART1EN);

	// Configure USART parameters
	config_uart_parameters(USART1, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	set_uart_transfer_direction(USART1, USART_CR1_TE);

	// Set Baudrate
	uart_set_baudrate(USART1, 16000000, 115200);

	// Enable USART
	uart_enable(USART1);
}

static void uart_write(USART_TypeDef * USARTx, uint8_t value)
{
	// Make sure TDR is empty
	while (!((USARTx->ISR & USART_ISR_TXE))) {}
	// Write value into TDR
	USARTx->TDR = value;
}

static void uart_enable(USART_TypeDef *USARTx)
{
	SET_BIT(USARTx->CR1,USART_CR1_UE);
}


static void set_uart_transfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection)
{
	  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);

}
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_div( PeriphClk,  BaudRate);
}

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);

  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
}
