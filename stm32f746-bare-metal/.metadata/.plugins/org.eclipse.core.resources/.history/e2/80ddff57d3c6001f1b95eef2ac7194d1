#include "stm32f7xx.h"

#define GPIOAEN					(1U<<0) // UART1 connected to PA9
#define UART_TX					(1U<<9) // UART1 connected to PA9
#define GPIO_ATERNATE_MODE		(0x2) 	// 0b 10
#define UART1EN					(1U<<4) // UART1 connected APB2
#define UART_DATAWIDTH_8B		(0x0) 	// Start bit, 8 data bits, n stop bits
#define UART_PARITY_1			(0x0)	// Even parity
#define UART_STOPBITS_1			(0x0)	// 1 stop bit

void set_ahb1_periph_clock(uint32_t periphs);
void set_ahb2_periph_clock(uint32_t periphs);
void set_apb1_periph_clock(uint32_t periphs);
void set_apb2_periph_clock(uint32_t periphs);
void set_pin_mode(GPIO_TypeDef *GPIOx, unit32_t Pin, unit32_t Mode);
void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, unit32_t Parity, uint32_t StopBits);
void compute_uart_div(unit32_t PeriphClk, unit32_t Baudrate);
void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t BaudRate);

int main(){


	while (1) {



	}

}

void uart3_tx_init(void)
{
	// 1. Enable clk access GPIOA
	set_ahb1_periph_clock(GPIOAEN);
	// 2. Set PA9 to alternation mode
	set_pin_mode(GPIOAEN, UART_TX, GPIO_ATERNATE_MODE);
	// 3. Set alternate function to USART
	GPIOA->AFR[1] |= 1U << 0;
	GPIOA->AFR[1] |= 1U << 1;
	GPIOA->AFR[1] |= 1U << 2;
	GPIOA->AFR[1] &= ~(1U << 3);
	// Enable clk to the USART3 module
	set_apb2_periph_clock(UART1EN);
	// Configure USART parameters
	config_uart_parameters(USART1, UART_DATAWIDTH_8B, UART_PARITY_1, UART_STOPBITS_1);
	// Set Baudrate
	uart_set_baudrate(USART1, 16000000, 115200);
	// Enable USART
	uart_enable(USART1);
}

void uart_enable(USART_TypeDef * USARTx) {
	SET_BIT(USARTx->CR1, USART_CR1_UE);
}

void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_div(PeriphClk, Baudrate);
}

void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, unit32_t Parity, uint32_t StopBits)
{
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
	MODIFY_REG(USARTx->CR2, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, StopBits);
}

void set_ahb1_periph_clock(uint32_t periphs)
{
	// RCC->AHB1ENR |= periphs;
	SET_BIT(RCC->AHB1ENR, periphs);
}

void set_ahb2_periph_clock(uint32_t periphs)
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
	SET_BIT(RCC->APB1ENR, periphs);
}

void set_apb2_periph_clock(uint32_t periphs)
{
	SET_BIT(RCC->APB2ENR, periphs);
}

void set_pin_mode(GPIO_TypeDef *GPIOx, unit32_t Pin, unit32_t Mode)
{
	// Clear the relevant bits in the mode register
	// GPIOx->MODER &= ~(1U<<18);
	// GPIOx->MODER &= ~(1U<<19);
	// Set the relevant bits in the mode register
	// GPIOx->AFR |= 1U<<19;
	MODIFY_REG(GPIOx->AFR, (0x3 << (POSITION_VAL(Pin) * 2U)), (0x1 << ((POSITION_VAL(Pin) * 2U))));
}

void compute_uart_div(unit32_t PeriphClk, unit32_t Baudrate)
{
	return (PeriphClk + Baudrate/2U)/Baudrate;
}































