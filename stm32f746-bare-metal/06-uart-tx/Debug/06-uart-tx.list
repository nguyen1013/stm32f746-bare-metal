
06-uart-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800051c  08000524  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00001524  2**0
                  CONTENTS
  4 .ARM          00000000  0800051c  0800051c  00001524  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800051c  08000524  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000524  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000524  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006a6  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001f9  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00001df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000075  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6a9  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000079a  00000000  00000000  0001d5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a941  00000000  00000000  0001dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  000b86dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000b8908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000504 	.word	0x08000504

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000504 	.word	0x08000504

08000208 <main>:
void uart_write(USART_TypeDef * USARTx, uint8_t value);
void uart1_tx_init(void);
void set_uart_transfer_direction(USART_TypeDef * USARTx, uint32_t TransferDirection);
void uart_enable(USART_TypeDef * USARTx);

int main(){
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0

	int x;
	uart1_tx_init();
 800020e:	f000 f82b 	bl	8000268 <uart1_tx_init>

	while(1)
	{
		 uart_write(USART1 , 'A');
 8000212:	2141      	movs	r1, #65	@ 0x41
 8000214:	4808      	ldr	r0, [pc, #32]	@ (8000238 <main+0x30>)
 8000216:	f000 f811 	bl	800023c <uart_write>
		 for(int i=0;i<9000;i++)
 800021a:	2300      	movs	r3, #0
 800021c:	603b      	str	r3, [r7, #0]
 800021e:	e005      	b.n	800022c <main+0x24>
		 {
			 x++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
		 for(int i=0;i<9000;i++)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000232:	4293      	cmp	r3, r2
 8000234:	ddf4      	ble.n	8000220 <main+0x18>
		 uart_write(USART1 , 'A');
 8000236:	e7ec      	b.n	8000212 <main+0xa>
 8000238:	40011000 	.word	0x40011000

0800023c <uart_write>:
		 }
	}
}

void uart_write(USART_TypeDef * USARTx, uint8_t value)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	460b      	mov	r3, r1
 8000246:	70fb      	strb	r3, [r7, #3]
	// Make sure TDR is empty
	while (!((USARTx->ISR & USART_ISR_TXE))) {}
 8000248:	bf00      	nop
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <uart_write+0xe>
	// Write value into TDR
	USARTx->TDR = value;
 8000256:	78fa      	ldrb	r2, [r7, #3]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <uart1_tx_init>:

void uart1_tx_init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	// 1. Enable clk access GPIOA
	set_ahb1_periph_clock(RCC_AHB1ENR_GPIOAEN);
 800026c:	2001      	movs	r0, #1
 800026e:	f000 f895 	bl	800039c <set_ahb1_periph_clock>

	// 2. Set PA9 to alternation mode
	set_pin_mode(GPIOA, UART1_TX, GPIO_ALTERNATE_MODE);
 8000272:	2202      	movs	r2, #2
 8000274:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000278:	4819      	ldr	r0, [pc, #100]	@ (80002e0 <uart1_tx_init+0x78>)
 800027a:	f000 f8b3 	bl	80003e4 <set_pin_mode>

	// 3. Set alternate function to USART
	GPIOA->AFR[1] |= (1U<<4);
 800027e:	4b18      	ldr	r3, [pc, #96]	@ (80002e0 <uart1_tx_init+0x78>)
 8000280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000282:	4a17      	ldr	r2, [pc, #92]	@ (80002e0 <uart1_tx_init+0x78>)
 8000284:	f043 0310 	orr.w	r3, r3, #16
 8000288:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (1U<<5);
 800028a:	4b15      	ldr	r3, [pc, #84]	@ (80002e0 <uart1_tx_init+0x78>)
 800028c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028e:	4a14      	ldr	r2, [pc, #80]	@ (80002e0 <uart1_tx_init+0x78>)
 8000290:	f043 0320 	orr.w	r3, r3, #32
 8000294:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |= (1U<<6);
 8000296:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <uart1_tx_init+0x78>)
 8000298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800029a:	4a11      	ldr	r2, [pc, #68]	@ (80002e0 <uart1_tx_init+0x78>)
 800029c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002a0:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(1U<<7);
 80002a2:	4b0f      	ldr	r3, [pc, #60]	@ (80002e0 <uart1_tx_init+0x78>)
 80002a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002a6:	4a0e      	ldr	r2, [pc, #56]	@ (80002e0 <uart1_tx_init+0x78>)
 80002a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002ac:	6253      	str	r3, [r2, #36]	@ 0x24

	// Enable clk to the USART1 module
	set_apb2_periph_clock(RCC_APB2ENR_USART1EN);
 80002ae:	2010      	movs	r0, #16
 80002b0:	f000 f886 	bl	80003c0 <set_apb2_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART1, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80002b4:	2300      	movs	r3, #0
 80002b6:	2200      	movs	r2, #0
 80002b8:	2100      	movs	r1, #0
 80002ba:	480a      	ldr	r0, [pc, #40]	@ (80002e4 <uart1_tx_init+0x7c>)
 80002bc:	f000 f84c 	bl	8000358 <config_uart_parameters>
	set_uart_transfer_direction(USART1, USART_CR1_TE);
 80002c0:	2108      	movs	r1, #8
 80002c2:	4808      	ldr	r0, [pc, #32]	@ (80002e4 <uart1_tx_init+0x7c>)
 80002c4:	f000 f822 	bl	800030c <set_uart_transfer_direction>

	// Set Baudrate
	uart_set_baudrate(USART1, 16000000, 115200);
 80002c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002cc:	4906      	ldr	r1, [pc, #24]	@ (80002e8 <uart1_tx_init+0x80>)
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <uart1_tx_init+0x7c>)
 80002d0:	f000 f82f 	bl	8000332 <uart_set_baudrate>

	// Enable USART
	uart_enable(USART1);
 80002d4:	4803      	ldr	r0, [pc, #12]	@ (80002e4 <uart1_tx_init+0x7c>)
 80002d6:	f000 f809 	bl	80002ec <uart_enable>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40020000 	.word	0x40020000
 80002e4:	40011000 	.word	0x40011000
 80002e8:	00f42400 	.word	0x00f42400

080002ec <uart_enable>:

void uart_enable(USART_TypeDef *USARTx)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1,USART_CR1_UE);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f043 0201 	orr.w	r2, r3, #1
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <set_uart_transfer_direction>:


void set_uart_transfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
	  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f023 020c 	bic.w	r2, r3, #12
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <uart_set_baudrate>:
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	b084      	sub	sp, #16
 8000336:	af00      	add	r7, sp, #0
 8000338:	60f8      	str	r0, [r7, #12]
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div( PeriphClk,  BaudRate);
 800033e:	6879      	ldr	r1, [r7, #4]
 8000340:	68b8      	ldr	r0, [r7, #8]
 8000342:	f000 f87e 	bl	8000442 <compute_uart_div>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	60da      	str	r2, [r3, #12]
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <config_uart_parameters>:

void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
 8000364:	603b      	str	r3, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <config_uart_parameters+0x40>)
 800036c:	4013      	ands	r3, r2
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	68ba      	ldr	r2, [r7, #8]
 8000372:	430a      	orrs	r2, r1
 8000374:	431a      	orrs	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	431a      	orrs	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	605a      	str	r2, [r3, #4]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	efffe9ff 	.word	0xefffe9ff

0800039c <set_ahb1_periph_clock>:

void set_ahb1_periph_clock(uint32_t perihs)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR,perihs);
 80003a4:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <set_ahb1_periph_clock+0x20>)
 80003a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003a8:	4904      	ldr	r1, [pc, #16]	@ (80003bc <set_ahb1_periph_clock+0x20>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40023800 	.word	0x40023800

080003c0 <set_apb2_periph_clock>:
{
	SET_BIT(RCC->APB1ENR,perihs);
}

void set_apb2_periph_clock(uint32_t perihs)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB2ENR,perihs);
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <set_apb2_periph_clock+0x20>)
 80003ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80003cc:	4904      	ldr	r1, [pc, #16]	@ (80003e0 <set_apb2_periph_clock+0x20>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40023800 	.word	0x40023800

080003e4 <set_pin_mode>:

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b089      	sub	sp, #36	@ 0x24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
	 //GPIOx->MODER &= ~(1U<<18);
	 //GPIOx->MODER &= ~(1U<<19);
	// Set the relevant bits in the mode register
	 //GPIOx->MODER |= 1U<<19;
	//MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << ((POSITION_VAL(Pin) * 2U))));
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	68ba      	ldr	r2, [r7, #8]
 80003f6:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f8:	697a      	ldr	r2, [r7, #20]
 80003fa:	fa92 f2a2 	rbit	r2, r2
 80003fe:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000400:	693a      	ldr	r2, [r7, #16]
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	0052      	lsls	r2, r2, #1
 800040a:	2103      	movs	r1, #3
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	43d2      	mvns	r2, r2
 8000412:	401a      	ands	r2, r3
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	fa93 f3a3 	rbit	r3, r3
 800041e:	61bb      	str	r3, [r7, #24]
  return result;
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	fab3 f383 	clz	r3, r3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	431a      	orrs	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	3724      	adds	r7, #36	@ 0x24
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <compute_uart_div>:

uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	085a      	lsrs	r2, r3, #1
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	441a      	add	r2, r3
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	fbb2 f3f3 	udiv	r3, r2, r3
 800045a:	b29b      	uxth	r3, r3
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000468:	480d      	ldr	r0, [pc, #52]	@ (80004a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800046c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	@ (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	@ (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000496:	f000 f811 	bl	80004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff feb5 	bl	8000208 <main>

0800049e <LoopForever>:

LoopForever:
  b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   r0, =_estack
 80004a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ac:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 80004b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b4:	2000001c 	.word	0x2000001c

080004b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <__libc_init_array>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	4d0d      	ldr	r5, [pc, #52]	@ (80004f4 <__libc_init_array+0x38>)
 80004c0:	4c0d      	ldr	r4, [pc, #52]	@ (80004f8 <__libc_init_array+0x3c>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	2600      	movs	r6, #0
 80004c8:	42a6      	cmp	r6, r4
 80004ca:	d109      	bne.n	80004e0 <__libc_init_array+0x24>
 80004cc:	4d0b      	ldr	r5, [pc, #44]	@ (80004fc <__libc_init_array+0x40>)
 80004ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000500 <__libc_init_array+0x44>)
 80004d0:	f000 f818 	bl	8000504 <_init>
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	2600      	movs	r6, #0
 80004da:	42a6      	cmp	r6, r4
 80004dc:	d105      	bne.n	80004ea <__libc_init_array+0x2e>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e4:	4798      	blx	r3
 80004e6:	3601      	adds	r6, #1
 80004e8:	e7ee      	b.n	80004c8 <__libc_init_array+0xc>
 80004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ee:	4798      	blx	r3
 80004f0:	3601      	adds	r6, #1
 80004f2:	e7f2      	b.n	80004da <__libc_init_array+0x1e>
 80004f4:	0800051c 	.word	0x0800051c
 80004f8:	0800051c 	.word	0x0800051c
 80004fc:	0800051c 	.word	0x0800051c
 8000500:	08000520 	.word	0x08000520

08000504 <_init>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr

08000510 <_fini>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr
